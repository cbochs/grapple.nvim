M.create_autocmds()                                          *M.create_autocmds*
    Initialize autocommand groups and events


M.create_commands()                                          *M.create_commands*


Grapple.Config                                                  *Grapple.Config*


M.load({opts?})                                                         *M.load*

    Parameters: ~
        {opts?}  (Grapple.Config)


M.load()                                                                *M.load*


M.setup({opts?})                                                       *M.setup*
     @class Grapple.Options
     @field buffer integer
     @field file_path string
     @field key Grapple.TagKey

    Parameters: ~
        {opts?}  (Grapple.Config)


M.tag({opts?})                                                           *M.tag*

    Parameters: ~
        {opts?}  (Grapple.Options)


M.untag({opts?})                                                       *M.untag*

    Parameters: ~
        {opts?}  (Grapple.Options)


M.toggle({opts?})                                                     *M.toggle*

    Parameters: ~
        {opts?}  (Grapple.Options)


M.find({opts?})                                                         *M.find*

    Parameters: ~
        {opts?}  (Grapple.Options)


M.key({opts?})                                                           *M.key*

    Parameters: ~
        {opts?}  (Grapple.Options)


M.exists({opts?})                                                     *M.exists*

    Parameters: ~
        {opts?}  (Grapple.Options)


M.select({opts?})                                                     *M.select*

    Parameters: ~
        {opts?}  (Grapple.Options)


M.cycle({opts?}, {direction})                                          *M.cycle*

    Parameters: ~
        {opts?}      (Grapple.Options)
        {direction}  (Grapple.Direction)


M.cycle_backward({opts?})                                     *M.cycle_backward*

    Parameters: ~
        {opts?}  (Grapple.Options)


M.cycle_forward({opts?})                                       *M.cycle_forward*

    Parameters: ~
        {opts?}  (Grapple.Options)


M.reset({scope?})                                                      *M.reset*

    Parameters: ~
        {scope?}  (Grapple.Scope)


M.popup_tags({scope?})                                            *M.popup_tags*

    Parameters: ~
        {scope?}  (Grapple.Scope)


M.popup_scopes()                                                *M.popup_scopes*


log.new()                                                              *log.new*


Grapple.Scope                                                    *Grapple.Scope*

    Type: ~
        Grapple.ScopeType|Grapple.ScopeResolver|string


Grapple.ScopeResolver                                    *Grapple.ScopeResolver*

    Type: ~
        fun():string


M.resolve({scope})                                                   *M.resolve*

    Parameters: ~
        {scope}  (Grapple.Scope)

    Returns: ~
        {string}


M.serialize({state})                                               *M.serialize*
    Serialize a lua table as json idempotently.

    Parameters: ~
        {state}  (table|string)

    Returns: ~
        {string}


M.deserialize({serialized_state})                                *M.deserialize*
    Deserialize a json blob into a lua table idempotently.

    Parameters: ~
        {serialized_state}  (table|string)

    Returns: ~
        {table}


M.save({save_path}, {state})                                            *M.save*
    Save a lua table to a given file.

    Parameters: ~
        {save_path}  (string)
        {state}      (table)

    Returns: ~
        {nil}


M.load({save_path})                                                     *M.load*
    Load a lua table from a given file.

    Parameters: ~
        {save_path}  (string)

    Returns: ~
        {table}


M.file_exists({file_path})                                       *M.file_exists*
    Check whether a file exists.

    Parameters: ~
        {file_path}  (string)

    Returns: ~
        {boolean}


Grapple.Tag                                                        *Grapple.Tag*

    Fields: ~
        {key}        (string|integer)
        {file_path}  (string)
        {cursor}     (table)


Grapple.TagKey                                                  *Grapple.TagKey*

    Type: ~
        string|integer


Grapple.TagTable                                              *Grapple.TagTable*

    Type: ~
        table<Grapple.TagKey,Grapple.Tag>


Grapple.Cursor                                                  *Grapple.Cursor*

    Type: ~
        table


M.reset({scope})                                                       *M.reset*

    Parameters: ~
        {scope}  (Grapple.Scope)


M.tag({scope}, {opts})                                                   *M.tag*

    Parameters: ~
        {scope}  (Grapple.Scope)
        {opts}   (Grapple.Options)


M.untag({scope}, {opts})                                               *M.untag*

    Parameters: ~
        {scope}  (Grapple.Scope)
        {opts}   (Grapple.Options)


M.update({scope}, {tag}, {cursor})                                    *M.update*

    Parameters: ~
        {scope}   (Grapple.Scope)
        {tag}     (Grapple.Tag)
        {cursor}  (Grapple.Cursor)


M.select({tag})                                                       *M.select*

    Parameters: ~
        {tag}  (Grapple.Tag)


M.find({scope}, {opts})                                                 *M.find*

    Parameters: ~
        {scope}  (Grapple.Scope)
        {opts}   (Grapple.Options)

    Returns: ~
        {Grapple.Tag|nil}


M.key({scope}, {opts})                                                   *M.key*

    Parameters: ~
        {scope}  (Grapple.Scope)
        {opts}   (Grapple.Options)

    Returns: ~
        {Grapple.TagKey|nil}


M.keys({scope})                                                         *M.keys*

    Parameters: ~
        {scope}  (Grapple.Scope)

    Returns: ~
        {Grapple.TagKey[]}


M.scopes()                                                            *M.scopes*


M.next({scope}, {start_index}, {direction})

    Parameters: ~
        {scope}        (Grapple.Scope)
        {start_index}  (integer)
        {direction}    (Grapple.Direction)

    Returns: ~
        {Grapple.Tag|nil}


M.load({save_path})                                                     *M.load*

    Parameters: ~
        {save_path}  (string)


M.save({save_path})                                                     *M.save*

    Parameters: ~
        {save_path}  (string)


vim:tw=78:ts=8:noet:ft=help:norl:
